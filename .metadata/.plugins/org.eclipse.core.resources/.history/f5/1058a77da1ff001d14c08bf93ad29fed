package com.project.InventoryManagement.service;

import java.time.LocalDate;
import java.util.*;

import org.springframework.stereotype.Service;

import com.project.InventoryManagement.model.Equipment;
import com.project.InventoryManagement.model.Request;
import com.project.InventoryManagement.model.RequestStatus;
import com.project.InventoryManagement.model.User;
import com.project.InventoryManagement.repository.RequestRepository;

@Service
public class RequestService {

    private final RequestRepository requestRepository;
    private final EquipmentService equipmentService;

    public RequestService(RequestRepository requestRepository, EquipmentService equipmentService) {
        this.requestRepository = requestRepository;
        this.equipmentService = equipmentService;
    }

    public Request raiseRequest(Long userId, Long equipmentId) {
        Equipment equipment = equipmentService.getEquipmentById(equipmentId);

        if (equipment.getQuantity() <= 0) {
            throw new IllegalArgumentException("Equipment is not available");
        }

        User user = userService.getUserById(userId);

        Request request = new Request();
        request.setUser(user);
        request.setEquipment(equipment);
        request.setRequestDate(LocalDate.now());
        request.setStatus(RequestStatus.PENDING);

        equipment.setQuantity(equipment.getQuantity() - 1);
        equipmentService.updateEquipment(equipment);

        return requestRepository.save(request);
    }

    public void approveRequest(Long requestId) {
        Request request = getRequestById(requestId);

        if (request.getStatus() != RequestStatus.PENDING) {
            throw new IllegalStateException("Request is already processed");
        }

        request.setStatus(RequestStatus.APPROVED);
        requestRepository.save(request);
    }

    public void rejectRequest(Long requestId) {
        Request request = getRequestById(requestId);

        if (request.getStatus() != RequestStatus.PENDING) {
            throw new IllegalStateException("Request is already processed");
        }

        request.setStatus(RequestStatus.REJECTED);
        requestRepository.save(request);
    }

    public Request getRequestById(Long requestId) {
        return requestRepository.findById(requestId)
                .orElseThrow(() -> new NoSuchElementException("Request not found"));
    }

    public List<Request> getAllRequests() {
        return requestRepository.findAll();
    }
}

